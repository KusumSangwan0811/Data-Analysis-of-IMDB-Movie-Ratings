# -*- coding: utf-8 -*-
"""DA_Project_Movie_Ratings.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bSXUKyJ_vSwwQvTRKCl0Tql6Ml3fPcBM

# Movies IMDB Data Analysis


## Project Overview

This project involves analyzing a dataset of movies from IMDb, a well-known online database of information related to films, television programs, home videos, video games, and streaming content. The goal is to gain insights into various aspects of movies, such as ratings, genres, release dates, and other key attributes. This is project I have done in the course [Data Analysis with Python: Zero to Pandas](zerotopandas.com).
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""## Downloading the Dataset

**About the Dataset**

The IMDB movie Rating Dataset is a dataset conatining IMDB ratings of top 1000 movies and TV shows. The data set used for this is available on: https://www.kaggle.com/datasets/milanvaddoriya/imdb-movie-rating




I have downloaded the Movies IMDB data from Kaggle and analyzed it.

Let's begin by downloading the data, and listing the files within the dataset.
"""

dataset_url = 'https://www.kaggle.com/datasets/milanvaddoriya/imdb-movie-rating'

import opendatasets as od
od.download(dataset_url)



"""The dataset has been downloaded and extracted."""

data_dir = './imdb-movie-rating'

import os
os.listdir(data_dir)

"""## Data Preparation and Cleaning

*  Load the dataset into a data frame using Pandas.
*  Explore basic information about the data such as the number of rows & columns, ranges of values etc.
*  Handled missing data by replacing or removing NaN values.


"""

raw_df=pd.read_csv('imdb-movie-rating/imdb.csv')
raw_df

raw_df.shape
raw_df.info()
raw_df.describe()

raw_df.Certificate = raw_df.Certificate.fillna('Not Rated')
raw_df

raw_copy_df=raw_df.copy()
raw_copy_df.drop(columns=['Metascore'], inplace=True)
raw_copy_df.info()

imdb_movies_df=raw_copy_df.dropna()
imdb_movies_df

imdb_movies_df=raw_copy_df.dropna()
imdb_movies_df

imdb_movies_df.rename(columns = {'Gross_in_$_M':'Gross_M'},inplace=True)
imdb_movies_df

imdb_movies_df.info()

imdb_movies_df.describe()

imdb_movies_year_df = imdb_movies_df.groupby('Year')['Gross_M'].sum()
imdb_movies_year_df

imdb_movies_cert_df = imdb_movies_df.groupby('Certificate')[['Runtime_in_min','Rating_from_10']].mean()
imdb_movies_cert_df





"""## Exploratory Analysis and Visualization

*  Compute the mean, sum, range and other interesting statistics for numeric columns.
*  Explore the distributions of numeric columns using histograms etc.
*  Analyze the relationship between columns using scatter plots, pie charts etc.

"""

imdb_movies_df.describe()

imdb_movies_df.head(10)

imdb_movies_df.tail(10)

imdb_movies_df.sample(10)

"""Let's begin by importing`matplotlib.pyplot` and `seaborn`."""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline

sns.set_style('darkgrid')
matplotlib.rcParams['font.size'] = 14
matplotlib.rcParams['figure.figsize'] = (9, 5)
matplotlib.rcParams['figure.facecolor'] = '#00000000'

"""Exploring features by plotting graphs."""

plt.hist(imdb_movies_df.Runtime_in_min, bins=np.arange(40,250, 10));

plt.hist(imdb_movies_cert_df.Rating_from_10, bins=np.arange(7.6, 8.6, 0.05));

"""In the following plots, we plot distribution of movies according to ratings out of 10. We observe that no movies have rating less than 7, so, to see the histogram clearly we update the range of histogram and plot in range 7 to 10."""

plt.title("Distribution of movies (rating based)")
plt.hist(imdb_movies_df.Rating_from_10,bins=np.arange(1, 10, 0.5));

plt.title("Distribution of movies (rating based)")
plt.hist(imdb_movies_df.Rating_from_10,bins=np.arange(7, 10, 0.2));

"""In the following plots, we plot duration distribution of movies and rating distribution of movies."""

sns.displot(imdb_movies_df.Rating_from_10, color='skyblue').set(title='Distribution of Movies Ratings')

sns.displot(imdb_movies_df.Runtime_in_min, color='black').set(title='Duration Distribution of Movies')



"""Considering following two plots corresponding to data for imdb_movies_cert_df and scatter plot is better at depicting the relation."""

plt.plot(imdb_movies_cert_df.Rating_from_10,imdb_movies_cert_df.Runtime_in_min)
plt.xlabel('Runtime (in min)')
plt.ylabel('Gross (in $M)');

sns.scatterplot(x=imdb_movies_cert_df.Rating_from_10, y=imdb_movies_cert_df.Runtime_in_min);

"""Now, we plot simple plot and scatter plot for the data including Rating and Runtime. and we observe that the scatter plot is easy to analyse."""

plt.plot(imdb_movies_df.Rating_from_10,imdb_movies_df.Runtime_in_min)
plt.xlabel('Runtime (in min)')
plt.ylabel('Gross (in $M)');

sns.scatterplot(x=imdb_movies_df.Rating_from_10, y=imdb_movies_df.Runtime_in_min);



"""## 5 Interesting Questions and their answers

On the basis of our data, we ask some questions and answer them.

#### Q1: List the movies have Rating_from_10 more than 9. Also, list the movies have Rating_from_10 more than 8.5.
"""

high_imdb_movies_df = imdb_movies_df[imdb_movies_df.Rating_from_10 > 9]

high_imdb_movies_df

Okay_imdb_movies_df = imdb_movies_df[imdb_movies_df.Rating_from_10 > 8.5]
Okay_imdb_movies_df

"""#### Q2: What are top 20 movies according to Rating_from_10 in increasing order?"""

imdb_sorted20_df=imdb_movies_df.sort_values('Rating_from_10', ascending=False).head(20)
imdb_sorted20_df



"""#### Q3: What is the mean Runtime_in_min for the refined dataset? and what is the  average runtime_in_min for the top 20 movies according to rating_from_10 in the refined dataset?"""

imdb_movies_df.Runtime_in_min.mean()

imdb_sorted20_df.Runtime_in_min.mean()



"""#### Q4: Draw a pie chart and scatter plot on the basis of Certificate."""

Cert_df= imdb_movies_df['Certificate'].value_counts()
Cert_df

Cert1_df=pd.DataFrame(Cert_df)
Cert1_df

g = plt.pie(imdb_movies_df.Certificate.value_counts(), labels=imdb_movies_df.Certificate.value_counts().index, autopct="%.0f%%", radius = 4,
            explode = (0.05, 0.05, 0.05,0.05, 0.05, 0.05, 0.05, 0.01, 0.4, 0.59, 1.53, 1.99, 2.52,3.0));
plt.show()



sns.displot(Cert1_df.Certificate, color='skyblue').set(title='Distribution of certificates')

plt.figure(figsize = (18,8))
sns.scatterplot(x=imdb_movies_df.Runtime_in_min, y=imdb_movies_df.Rating_from_10, hue=imdb_movies_df.Certificate, s=50);

plt.figure(figsize = (20,8))
sns.scatterplot(x=imdb_movies_df.Gross_M, y=imdb_movies_df.Rating_from_10, hue=imdb_movies_df.Certificate, s=50);



"""#### Q5: What is year wise Gross_M?"""

imdb_movies_year_df = imdb_movies_df.groupby('Year')['Gross_M'].sum()
imdb_movies_year_df



"""## Inferences and Conclusion

We observe that there are only two movies with IMDB greater than 9.

From analyzing the data,
1. there are only two movies with IMDB greater than 9,
2. the movies having IMDB greater than 9 have runtime less than 210,
3. R rated and PG-13 consists of more than half of this list,

It is surprising to see that 75% of the movies in the top rated list belong to one among three certificates and for 15% of movies there is no rating available.
"""

